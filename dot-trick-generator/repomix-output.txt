This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-09T13:47:54.976Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/components/context/ThemeContext.jsx
src/components/CopyButton.css
src/components/CopyButton.jsx
src/components/EmailInputSection.css
src/components/EmailInputSection.jsx
src/components/ErrorBoundary.jsx
src/components/Header.css
src/components/Header.jsx
src/components/Introduction.css
src/components/Introduction.jsx
src/components/PaginatedResults.jsx
src/components/VirtualizedResults.css
src/components/VirtualizedResults.jsx
src/components/workers/emailGenerator.worker.js
src/index.css
src/main.jsx
src/public/sw.js
tailwind.config.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "dot-trick-generator",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-paginate": "^8.2.0",
    "react-window": "^1.8.10",
    "streamsaver": "^2.0.6",
    "web-streams-polyfill": "^4.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "vite": "^5.4.10"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

.app {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
}

.action-buttons {
  display: flex;
  gap: 15px;
  justify-content: center;
  margin-top: 20px;
}

@media (max-width: 600px) {
  .app {
    padding: 15px;
  }

  .action-buttons {
    flex-direction: column;
    gap: 10px;
  }
}

================
File: src/App.jsx
================
// src/App.jsx
import React, { useState } from 'react';
import Header from './components/Header';
import Introduction from './components/Introduction';
import EmailInputSection from './components/EmailInputSection';
import PaginatedResults from './components/PaginatedResults';
import ErrorBoundary from './components/ErrorBoundary';

const App = () => {
  const [generationData, setGenerationData] = useState(null);

  const handleGenerate = ({ prefix, provider, total }) => {
    setGenerationData({ prefix, provider, total });
  };

  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300">
        <Header />
        <main className="container mx-auto px-4 py-8">
          <Introduction />
          <EmailInputSection onGenerate={handleGenerate} />
          {generationData && (
            <PaginatedResults
              prefix={generationData.prefix}
              provider={generationData.provider}
              total={generationData.total}
            />
          )}
        </main>
      </div>
    </ErrorBoundary>
  );
};

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/context/ThemeContext.jsx
================
// src/components/context/ThemeContext.jsx
import React, { createContext, useState, useEffect } from 'react';

export const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  // Check for user's preferred theme
  const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
  const [theme, setTheme] = useState(prefersDark ? 'dark' : 'light');

  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

================
File: src/components/CopyButton.css
================
/* src/components/CopyButton.css */

.copy-button {
  background-color: var(--secondary-color);
  color: #ffffff;
  padding: 8px 16px;
  font-size: 0.9rem;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.copy-button:hover:not(:disabled) {
  background-color: var(--button-hover-secondary);
}

.copy-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

================
File: src/components/CopyButton.jsx
================
// src/components/CopyButton.jsx
import React from 'react';
import './CopyButton.css';

const CopyButton = ({ onCopy, disabled }) => {
  return (
    <button
      onClick={onCopy}
      className="copy-button"
      disabled={disabled}
      aria-disabled={disabled}
      aria-label="Copy emails to clipboard"
    >
      Copy to Clipboard
    </button>
  );
};

export default CopyButton;

================
File: src/components/EmailInputSection.css
================
/* src/components/EmailInputSection.css */

.email-input-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 40px;
  padding: 20px;
  background-color: var(--input-bg-color);
  border: 1px solid var(--border-color);
  border-radius: 10px;
  width: 100%;
  max-width: 600px;
}

.input-group {
  display: flex;
  gap: 15px;
  width: 100%;
}

.input-wrapper {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.visually-hidden {
  position: absolute;
  left: -10000px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

.prefix-input-container {
  display: flex;
  align-items: center;
}

.email-input {
  flex: 1;
  padding: 12px 15px;
  font-size: 1rem;
  border: 1px solid var(--border-color);
  border-radius: 5px 0 0 5px;
  background-color: var(--background-color);
  color: var(--text-color);
  transition: border-color 0.3s;
}

.email-input:focus {
  border-color: var(--primary-color);
  outline: none;
}

.email-input.invalid {
  border-color: var(--danger-color);
}

.email-suffix {
  padding: 12px 15px;
  font-size: 1rem;
  border: 1px solid var(--border-color);
  border-left: none;
  border-radius: 0 5px 5px 0;
  background-color: var(--background-color);
  color: var(--text-color);
}

.email-count {
  margin-top: 15px;
  font-size: 1.1rem;
  font-weight: bold;
  color: var(--text-color);
}

.error-message {
  margin-top: 10px;
  color: var(--danger-color);
  font-weight: bold;
  font-size: 1rem;
}

.generate-button {
  margin-top: 20px;
  background-color: var(--primary-color);
  color: #ffffff;
  padding: 10px 20px;
  font-size: 1rem;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.generate-button:hover:not(:disabled) {
  background-color: var(--button-hover-primary);
}

.generate-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

================
File: src/components/EmailInputSection.jsx
================
// src/components/EmailInputSection.jsx
import React, { useState, useEffect } from 'react';

const EmailInputSection = ({ onGenerate }) => {
  const [prefix, setPrefix] = useState('');
  const [emailCount, setEmailCount] = useState(0);
  const [error, setError] = useState('');
  const [isPrefixValid, setIsPrefixValid] = useState(false);

  // Calculate the number of possible variations based on possible dot insertions
  const calculateEmailCount = (input) => {
    const length = input.length;
    if (length < 6 || length > 30) return 0; // Enforce Gmail length constraints
    return Math.pow(2, length - 1);
  };

  useEffect(() => {
    const count = calculateEmailCount(prefix);
    setEmailCount(count);
  }, [prefix]);

  // Validate email prefix
  const validatePrefix = (str) => {
    const regex = /^[a-zA-Z0-9.]{6,30}$/; // Letters, numbers, periods, 6-30 chars
    return regex.test(str);
  };

  const handlePrefixChange = (e) => {
    const value = e.target.value;
    setPrefix(value);
    const isValid = validatePrefix(value);
    setIsPrefixValid(isValid);
    if (!isValid && value.length >= 6) {
      setError('Only letters, numbers, and periods are allowed. Length: 6-30 characters.');
    } else {
      setError('');
    }
  };

  const handleGenerate = () => {
    if (!isPrefixValid) {
      setError('Please correct the errors before generating.');
      return;
    }

    if (emailCount > 30000000) {
      setError('The number of variations exceeds the limit of 30,000,000. Please reduce the length of the prefix.');
      return;
    }

    setError('');
    onGenerate({ prefix, provider: 'gmail.com', total: emailCount });
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
      <div className="mb-4">
        <label htmlFor="email-prefix" className="block text-sm font-medium text-gray-700 dark:text-gray-300 visually-hidden">
          Email Prefix
        </label>
        <div className="flex">
          <input
            id="email-prefix"
            type="text"
            placeholder="Enter email prefix"
            value={prefix}
            onChange={handlePrefixChange}
            className={`flex-1 px-4 py-2 border ${
              !isPrefixValid && prefix.length >= 6 ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'
            } rounded-l-md focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-gray-200`}
            aria-label="Email prefix"
            maxLength={30} // Enforce max length
          />
          <span className="inline-flex items-center px-3 bg-gray-200 dark:bg-gray-700 border border-l-0 border-gray-300 dark:border-gray-700 rounded-r-md text-gray-700 dark:text-gray-300">
            @gmail.com
          </span>
        </div>
        {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
      </div>
      <div className="flex justify-between items-center">
        <span className="text-sm text-gray-600 dark:text-gray-400">Email Count: {emailCount.toLocaleString()}</span>
        <button
          onClick={handleGenerate}
          disabled={!isPrefixValid || emailCount === 0}
          className={`px-4 py-2 rounded-md text-white text-sm font-medium ${
            isPrefixValid && emailCount !== 0
              ? 'bg-indigo-600 hover:bg-indigo-700 focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'
              : 'bg-indigo-300 cursor-not-allowed'
          } transition-colors duration-300`}
        >
          Generate
        </button>
      </div>
    </div>
  );
};

export default EmailInputSection;

================
File: src/components/ErrorBoundary.jsx
================
// src/components/ErrorBoundary.jsx
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render shows the fallback UI.
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // You can log the error to an error reporting service here
    console.error("ErrorBoundary caught an error", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // Enhanced Fallback UI with Tailwind
      return (
        <div className="flex items-center justify-center min-h-screen bg-red-100">
          <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md">
            <h2 className="text-2xl font-semibold text-red-600 dark:text-red-400 mb-4">Something Went Wrong</h2>
            <p className="text-gray-700 dark:text-gray-300">
              An unexpected error has occurred. Please try refreshing the page or contact support if the problem persists.
            </p>
          </div>
        </div>
      );
    }

    return this.props.children; 
  }
}

export default ErrorBoundary;

================
File: src/components/Header.css
================
/* src/components/Header.css */

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding: 0 20px;
}

.header h1 {
  font-size: 2rem;
  font-weight: bold;
  color: var(--text-color);
}

.theme-toggle {
  padding: 8px 12px;
  font-size: 1rem;
  cursor: pointer;
  background-color: transparent;
  border: 2px solid var(--primary-color);
  border-radius: 5px;
  color: var(--primary-color);
  transition: background-color 0.3s, color 0.3s;
}

.theme-toggle:hover {
  background-color: var(--primary-color);
  color: #ffffff;
}

================
File: src/components/Header.jsx
================
// src/components/Header.jsx
import React, { useContext } from 'react';
import { ThemeContext } from './context/ThemeContext';

const Header = () => {
  const { theme, toggleTheme } = useContext(ThemeContext);

  return (
    <header className="bg-indigo-600 text-white shadow-md">
      <div className="container mx-auto px-4 py-4 flex justify-between items-center">
        <h1 className="text-2xl font-bold">Dot Trick Generator</h1>
        <button
          onClick={toggleTheme}
          className="bg-indigo-700 hover:bg-indigo-800 text-white p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          aria-label="Toggle Dark Mode"
        >
          {theme === 'light' ? '🌙' : '☀️'}
        </button>
      </div>
    </header>
  );
};

export default Header;

================
File: src/components/Introduction.css
================
/* src/components/Introduction.css */

.introduction {
  text-align: center;
  margin-bottom: 40px;
  padding: 0 20px;
}

.introduction p {
  font-size: 1.1rem;
  color: var(--text-color);
  max-width: 600px;
  margin: 0 auto;
  line-height: 1.6;
}

================
File: src/components/Introduction.jsx
================
// src/components/Introduction.jsx
import React from 'react';

const Introduction = () => (
  <section className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-8">
    <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4">Generate Gmail Email Variations</h2>
    <p className="text-gray-600 dark:text-gray-300">
      Easily create multiple Gmail email variations by inserting or removing dots in your email prefix. Ensure your prefix is between <strong>6 to 30 characters</strong> long and contains only <strong>letters, numbers, and periods</strong>.
    </p>
  </section>
);

export default Introduction;

================
File: src/components/PaginatedResults.jsx
================
// src/components/PaginatedResults.jsx
import React, { useState, useMemo } from 'react';
import ReactPaginate from 'react-paginate';

const PaginatedResults = ({ prefix, provider, total }) => {
  const [currentPage, setCurrentPage] = useState(0);
  const [itemsPerPage, setItemsPerPage] = useState(16384); // Default to 16K items per page

  const itemsPerPageOptions = [1000, 5000, 10000, 16384];
  const pageCount = Math.ceil(total / itemsPerPage);

  const handlePageClick = ({ selected }) => {
    setCurrentPage(selected);
  };

  const handleItemsPerPageChange = (e) => {
    setItemsPerPage(Number(e.target.value));
    setCurrentPage(0); // Reset to first page when items per page changes
  };

  // Generate emails for the current page
  const currentEmails = useMemo(() => {
    const emails = [];
    const start = currentPage * itemsPerPage;
    const end = Math.min(start + itemsPerPage, total);

    for (let i = start; i < end; i++) {
      emails.push(generateEmail(prefix, i, provider));
    }

    return emails;
  }, [currentPage, prefix, provider, itemsPerPage, total]);

  const handleCopy = () => {
    if (currentEmails.length === 0) return;
    const text = currentEmails.join('\n');
    navigator.clipboard.writeText(text)
      .then(() => {
        console.log('Emails copied to clipboard!');
      })
      .catch((err) => {
        console.error('Failed to copy emails:', err);
        alert('Failed to copy emails.');
      });
  };

  // Row component for React Window
  const Row = ({ index, style }) => (
    <div style={style} className="px-6 py-4 whitespace-nowrap">
      {currentEmails[index]}
    </div>
  );

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
      <div className="flex justify-between items-center mb-4">
        <button
          onClick={handleCopy}
          disabled={currentEmails.length === 0}
          className={`px-4 py-2 rounded-md text-white text-sm font-medium ${
            currentEmails.length > 0
              ? 'bg-green-600 hover:bg-green-700 focus:ring-2 focus:ring-offset-2 focus:ring-green-500'
              : 'bg-green-300 cursor-not-allowed'
          } transition-colors duration-300`}
        >
          Copy to Clipboard
        </button>
        <div className="flex items-center">
          <label htmlFor="items-per-page" className="mr-2 text-sm text-gray-700 dark:text-gray-300">
            Items per page:
          </label>
          <select
            id="items-per-page"
            value={itemsPerPage}
            onChange={handleItemsPerPageChange}
            className="mt-1 block pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md dark:bg-gray-700 dark:text-gray-200"
          >
            {itemsPerPageOptions.map((option) => (
              <option key={option} value={option}>
                {option.toLocaleString()}
              </option>
            ))}
          </select>
        </div>
      </div>
      <div className="text-sm text-gray-600 dark:text-gray-400 mb-4">
        Page {currentPage + 1} of {pageCount.toLocaleString()}
      </div>
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead className="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Email Variations
              </th>
            </tr>
          </thead>
          <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
            {currentEmails.map((email, index) => (
              <tr key={index}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                  {email}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div className="mt-4">
        <ReactPaginate
          previousLabel={"← Previous"}
          nextLabel={"Next →"}
          pageCount={pageCount}
          onPageChange={handlePageClick}
          containerClassName={"flex justify-center space-x-2"}
          previousLinkClassName={"px-3 py-1 border border-gray-300 dark:border-gray-700 rounded-md text-gray-500 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"}
          nextLinkClassName={"px-3 py-1 border border-gray-300 dark:border-gray-700 rounded-md text-gray-500 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"}
          disabledClassName={"opacity-50 cursor-not-allowed"}
          activeClassName={"bg-indigo-600 text-white"}
        />
      </div>
    </div>
  );
};

// Helper function to generate email based on variation index
const generateEmail = (prefix, variationIndex, provider) => {
  let email = prefix[0];
  const length = prefix.length;

  for (let i = 1; i < length; i++) {
    // Bitwise operation to determine if a dot should be inserted
    if ((variationIndex & (1 << (i - 1))) !== 0) {
      email += '.';
    }
    email += prefix[i];
  }

  return `${email}@${provider}`;
};

export default PaginatedResults;

================
File: src/components/VirtualizedResults.css
================
/* src/components/VirtualizedResults.css */

.virtualized-results {
  width: 100%;
  max-width: 600px;
  margin-bottom: 40px;
}

.virtualized-item {
  padding: 10px 15px;
  border-bottom: 1px solid var(--border-color);
  color: var(--text-color);
}

.virtualized-item:nth-child(odd) {
  background-color: var(--input-bg-color);
}

================
File: src/components/VirtualizedResults.jsx
================
// src/components/VirtualizedResults.jsx
import React from 'react';
import { FixedSizeList as List } from 'react-window';
import './VirtualizedResults.css';

const VirtualizedResults = ({ emails }) => (
  <div className="virtualized-results">
    {emails.length > 0 ? (
      <List
        height={400}
        itemCount={emails.length}
        itemSize={35}
        width={'100%'}
      >
        {({ index, style }) => (
          <div style={style} className="virtualized-item">
            {emails[index]}
          </div>
        )}
      </List>
    ) : (
      <p>No email variations generated yet.</p>
    )}
  </div>
);

export default VirtualizedResults;

================
File: src/components/workers/emailGenerator.worker.js
================
// src/components/workers/emailGenerator.worker.js
/* eslint-disable no-restricted-globals */
self.onmessage = function (e) {
  const { prefix, provider } = e.data;
  const length = prefix.length;
  const totalVariations = Math.pow(2, length - 1);
  let generated = 0;

  const generateEmails = () => {
    for (let i = 0; i < totalVariations; i++) {
      let email = prefix[0];
      for (let j = 1; j < length; j++) {
        if ((i & (1 << (j - 1))) !== 0) {
          email += '.';
        }
        email += prefix[j];
      }
      const emailWithProvider = `${email}@${provider}\n`;
      self.postMessage({ type: 'chunk', chunk: emailWithProvider });
      generated++;

      // Send progress updates every 100,000 emails
      if (generated % 100000 === 0) {
        self.postMessage({ type: 'progress', progress: ((generated / totalVariations) * 100).toFixed(2) });
      }
    }
    self.postMessage({ type: 'complete' });
  };

  generateEmails();
};

================
File: src/index.css
================
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary-color: #0070f3;
  --secondary-color: #28a745;
  --danger-color: #ff4d4f;
  --background-color: #ffffff;
  --text-color: #333333;
  --input-bg-color: #f9f9f9;
  --border-color: #e0e0e0;
  --error-color: #ff4d4f;
  --button-hover-primary: #005bb5;
  --button-hover-secondary: #218838;
  --button-hover-danger: #d9363e;
}

body {
  margin: 0;
  padding: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
  transition: background-color 0.3s, color 0.3s;
}

body.dark {
  --background-color: #121212;
  --text-color: #e0e0e0;
  --input-bg-color: #1e1e1e;
  --border-color: #333333;
  --error-color: #ff6b6b;
}

* {
  box-sizing: border-box;
}

a {
  color: var(--primary-color);
  text-decoration: none;
}

a:hover {
  color: var(--button-hover-primary);
}

button {
  border-radius: 5px;
  border: none;
  padding: 10px 20px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
}

button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

button:hover:not(:disabled) {
  /* Styles will be defined per button */
}

h1 {
  font-size: 2rem;
  line-height: 1.2;
}

p {
  font-size: 1rem;
  line-height: 1.6;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
}

================
File: src/main.jsx
================
// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { ThemeProvider } from './components/context/ThemeContext';

// Register the service worker
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js').then(() => {
    console.log('Service Worker Registered');
  }).catch((error) => {
    console.error('Service Worker Registration Failed:', error);
  });
}

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ThemeProvider>
      <App />
    </ThemeProvider>
  </React.StrictMode>
);

================
File: src/public/sw.js
================
// public/sw.js
importScripts('https://unpkg.com/streamsaver@2.0.5/StreamSaver.min.js');

self.addEventListener('fetch', () => {
  // Minimal Service Worker
});

================
File: tailwind.config.js
================
// tailwind.config.js
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  darkMode: 'class', // Enable dark mode via class
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: vite.config.js
================
// vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  build: {
    rollupOptions: {
      output: {
        // Prevent chunk splitting for workers (if needed)
        manualChunks(id) {
          if (id.includes('emailGenerator.worker.js')) {
            return 'emailGenerator.worker';
          }
        }
      }
    }
  }
});
